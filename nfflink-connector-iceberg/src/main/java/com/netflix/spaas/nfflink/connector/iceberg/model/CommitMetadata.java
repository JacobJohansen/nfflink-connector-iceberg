/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.netflix.spaas.nfflink.connector.iceberg.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CommitMetadata extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7352430671248723110L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CommitMetadata\",\"namespace\":\"com.netflix.spaas.nfflink.connector.iceberg.model\",\"fields\":[{\"name\":\"lastCheckpointId\",\"type\":\"long\"},{\"name\":\"lastCheckpointTimestamp\",\"type\":\"long\"},{\"name\":\"lastCommitTimestamp\",\"type\":\"long\"},{\"name\":\"vttsWatermark\",\"type\":[\"null\",\"long\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CommitMetadata> ENCODER =
      new BinaryMessageEncoder<CommitMetadata>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CommitMetadata> DECODER =
      new BinaryMessageDecoder<CommitMetadata>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<CommitMetadata> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<CommitMetadata> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CommitMetadata>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this CommitMetadata to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a CommitMetadata from a ByteBuffer. */
  public static CommitMetadata fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long lastCheckpointId;
  @Deprecated public long lastCheckpointTimestamp;
  @Deprecated public long lastCommitTimestamp;
  @Deprecated public java.lang.Long vttsWatermark;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CommitMetadata() {}

  /**
   * All-args constructor.
   * @param lastCheckpointId The new value for lastCheckpointId
   * @param lastCheckpointTimestamp The new value for lastCheckpointTimestamp
   * @param lastCommitTimestamp The new value for lastCommitTimestamp
   * @param vttsWatermark The new value for vttsWatermark
   */
  public CommitMetadata(java.lang.Long lastCheckpointId, java.lang.Long lastCheckpointTimestamp, java.lang.Long lastCommitTimestamp, java.lang.Long vttsWatermark) {
    this.lastCheckpointId = lastCheckpointId;
    this.lastCheckpointTimestamp = lastCheckpointTimestamp;
    this.lastCommitTimestamp = lastCommitTimestamp;
    this.vttsWatermark = vttsWatermark;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return lastCheckpointId;
    case 1: return lastCheckpointTimestamp;
    case 2: return lastCommitTimestamp;
    case 3: return vttsWatermark;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: lastCheckpointId = (java.lang.Long)value$; break;
    case 1: lastCheckpointTimestamp = (java.lang.Long)value$; break;
    case 2: lastCommitTimestamp = (java.lang.Long)value$; break;
    case 3: vttsWatermark = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'lastCheckpointId' field.
   * @return The value of the 'lastCheckpointId' field.
   */
  public java.lang.Long getLastCheckpointId() {
    return lastCheckpointId;
  }

  /**
   * Sets the value of the 'lastCheckpointId' field.
   * @param value the value to set.
   */
  public void setLastCheckpointId(java.lang.Long value) {
    this.lastCheckpointId = value;
  }

  /**
   * Gets the value of the 'lastCheckpointTimestamp' field.
   * @return The value of the 'lastCheckpointTimestamp' field.
   */
  public java.lang.Long getLastCheckpointTimestamp() {
    return lastCheckpointTimestamp;
  }

  /**
   * Sets the value of the 'lastCheckpointTimestamp' field.
   * @param value the value to set.
   */
  public void setLastCheckpointTimestamp(java.lang.Long value) {
    this.lastCheckpointTimestamp = value;
  }

  /**
   * Gets the value of the 'lastCommitTimestamp' field.
   * @return The value of the 'lastCommitTimestamp' field.
   */
  public java.lang.Long getLastCommitTimestamp() {
    return lastCommitTimestamp;
  }

  /**
   * Sets the value of the 'lastCommitTimestamp' field.
   * @param value the value to set.
   */
  public void setLastCommitTimestamp(java.lang.Long value) {
    this.lastCommitTimestamp = value;
  }

  /**
   * Gets the value of the 'vttsWatermark' field.
   * @return The value of the 'vttsWatermark' field.
   */
  public java.lang.Long getVttsWatermark() {
    return vttsWatermark;
  }

  /**
   * Sets the value of the 'vttsWatermark' field.
   * @param value the value to set.
   */
  public void setVttsWatermark(java.lang.Long value) {
    this.vttsWatermark = value;
  }

  /**
   * Creates a new CommitMetadata RecordBuilder.
   * @return A new CommitMetadata RecordBuilder
   */
  public static com.netflix.spaas.nfflink.connector.iceberg.model.CommitMetadata.Builder newBuilder() {
    return new com.netflix.spaas.nfflink.connector.iceberg.model.CommitMetadata.Builder();
  }

  /**
   * Creates a new CommitMetadata RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CommitMetadata RecordBuilder
   */
  public static com.netflix.spaas.nfflink.connector.iceberg.model.CommitMetadata.Builder newBuilder(com.netflix.spaas.nfflink.connector.iceberg.model.CommitMetadata.Builder other) {
    return new com.netflix.spaas.nfflink.connector.iceberg.model.CommitMetadata.Builder(other);
  }

  /**
   * Creates a new CommitMetadata RecordBuilder by copying an existing CommitMetadata instance.
   * @param other The existing instance to copy.
   * @return A new CommitMetadata RecordBuilder
   */
  public static com.netflix.spaas.nfflink.connector.iceberg.model.CommitMetadata.Builder newBuilder(com.netflix.spaas.nfflink.connector.iceberg.model.CommitMetadata other) {
    return new com.netflix.spaas.nfflink.connector.iceberg.model.CommitMetadata.Builder(other);
  }

  /**
   * RecordBuilder for CommitMetadata instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CommitMetadata>
    implements org.apache.avro.data.RecordBuilder<CommitMetadata> {

    private long lastCheckpointId;
    private long lastCheckpointTimestamp;
    private long lastCommitTimestamp;
    private java.lang.Long vttsWatermark;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.netflix.spaas.nfflink.connector.iceberg.model.CommitMetadata.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.lastCheckpointId)) {
        this.lastCheckpointId = data().deepCopy(fields()[0].schema(), other.lastCheckpointId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastCheckpointTimestamp)) {
        this.lastCheckpointTimestamp = data().deepCopy(fields()[1].schema(), other.lastCheckpointTimestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastCommitTimestamp)) {
        this.lastCommitTimestamp = data().deepCopy(fields()[2].schema(), other.lastCommitTimestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.vttsWatermark)) {
        this.vttsWatermark = data().deepCopy(fields()[3].schema(), other.vttsWatermark);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CommitMetadata instance
     * @param other The existing instance to copy.
     */
    private Builder(com.netflix.spaas.nfflink.connector.iceberg.model.CommitMetadata other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.lastCheckpointId)) {
        this.lastCheckpointId = data().deepCopy(fields()[0].schema(), other.lastCheckpointId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastCheckpointTimestamp)) {
        this.lastCheckpointTimestamp = data().deepCopy(fields()[1].schema(), other.lastCheckpointTimestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastCommitTimestamp)) {
        this.lastCommitTimestamp = data().deepCopy(fields()[2].schema(), other.lastCommitTimestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.vttsWatermark)) {
        this.vttsWatermark = data().deepCopy(fields()[3].schema(), other.vttsWatermark);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'lastCheckpointId' field.
      * @return The value.
      */
    public java.lang.Long getLastCheckpointId() {
      return lastCheckpointId;
    }

    /**
      * Sets the value of the 'lastCheckpointId' field.
      * @param value The value of 'lastCheckpointId'.
      * @return This builder.
      */
    public com.netflix.spaas.nfflink.connector.iceberg.model.CommitMetadata.Builder setLastCheckpointId(long value) {
      validate(fields()[0], value);
      this.lastCheckpointId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'lastCheckpointId' field has been set.
      * @return True if the 'lastCheckpointId' field has been set, false otherwise.
      */
    public boolean hasLastCheckpointId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'lastCheckpointId' field.
      * @return This builder.
      */
    public com.netflix.spaas.nfflink.connector.iceberg.model.CommitMetadata.Builder clearLastCheckpointId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastCheckpointTimestamp' field.
      * @return The value.
      */
    public java.lang.Long getLastCheckpointTimestamp() {
      return lastCheckpointTimestamp;
    }

    /**
      * Sets the value of the 'lastCheckpointTimestamp' field.
      * @param value The value of 'lastCheckpointTimestamp'.
      * @return This builder.
      */
    public com.netflix.spaas.nfflink.connector.iceberg.model.CommitMetadata.Builder setLastCheckpointTimestamp(long value) {
      validate(fields()[1], value);
      this.lastCheckpointTimestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lastCheckpointTimestamp' field has been set.
      * @return True if the 'lastCheckpointTimestamp' field has been set, false otherwise.
      */
    public boolean hasLastCheckpointTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lastCheckpointTimestamp' field.
      * @return This builder.
      */
    public com.netflix.spaas.nfflink.connector.iceberg.model.CommitMetadata.Builder clearLastCheckpointTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastCommitTimestamp' field.
      * @return The value.
      */
    public java.lang.Long getLastCommitTimestamp() {
      return lastCommitTimestamp;
    }

    /**
      * Sets the value of the 'lastCommitTimestamp' field.
      * @param value The value of 'lastCommitTimestamp'.
      * @return This builder.
      */
    public com.netflix.spaas.nfflink.connector.iceberg.model.CommitMetadata.Builder setLastCommitTimestamp(long value) {
      validate(fields()[2], value);
      this.lastCommitTimestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lastCommitTimestamp' field has been set.
      * @return True if the 'lastCommitTimestamp' field has been set, false otherwise.
      */
    public boolean hasLastCommitTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lastCommitTimestamp' field.
      * @return This builder.
      */
    public com.netflix.spaas.nfflink.connector.iceberg.model.CommitMetadata.Builder clearLastCommitTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'vttsWatermark' field.
      * @return The value.
      */
    public java.lang.Long getVttsWatermark() {
      return vttsWatermark;
    }

    /**
      * Sets the value of the 'vttsWatermark' field.
      * @param value The value of 'vttsWatermark'.
      * @return This builder.
      */
    public com.netflix.spaas.nfflink.connector.iceberg.model.CommitMetadata.Builder setVttsWatermark(java.lang.Long value) {
      validate(fields()[3], value);
      this.vttsWatermark = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'vttsWatermark' field has been set.
      * @return True if the 'vttsWatermark' field has been set, false otherwise.
      */
    public boolean hasVttsWatermark() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'vttsWatermark' field.
      * @return This builder.
      */
    public com.netflix.spaas.nfflink.connector.iceberg.model.CommitMetadata.Builder clearVttsWatermark() {
      vttsWatermark = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CommitMetadata build() {
      try {
        CommitMetadata record = new CommitMetadata();
        record.lastCheckpointId = fieldSetFlags()[0] ? this.lastCheckpointId : (java.lang.Long) defaultValue(fields()[0]);
        record.lastCheckpointTimestamp = fieldSetFlags()[1] ? this.lastCheckpointTimestamp : (java.lang.Long) defaultValue(fields()[1]);
        record.lastCommitTimestamp = fieldSetFlags()[2] ? this.lastCommitTimestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.vttsWatermark = fieldSetFlags()[3] ? this.vttsWatermark : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CommitMetadata>
    WRITER$ = (org.apache.avro.io.DatumWriter<CommitMetadata>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CommitMetadata>
    READER$ = (org.apache.avro.io.DatumReader<CommitMetadata>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
